#!/bin/bash

# Raoul Scarazzini (rasca@redhat.com) - 2016/03/23:
# This script provides a test suite to be used in the transition between the actual 
# OSPd HA setup, named "Pacemaker", into the future one, named "Pacemaker Light"

function usage {
  echo "Usage $0 -t 0|A|B|C|D [-r <seconds>]
-t, --test <A|B|C|D>		Specify which test to run
-r, --recover <seconds>		Try to recover environment after seconds

Test suites available:
0 - Check for failed actions
A - Stop every systemd resource, stop Galera and Rabbitmq, Start every systemd resource
B - Stop Galera and Rabbitmq, stop every systemd resource, Start every systemd resource
C - Stop Galera and Rabbitmq, wait 20 minutes to see if something fails
D - Stop the cluster and check if there are (still) active processes
"
}

function check_failed_actions {
 resource=$1

 sudo pcs status | grep "Failed Actions:" &> /dev/null
 if [ $? -eq 0 ]
  then
   if [ "x$resource" == "x" ]
    then
     echo "Cluster has failed actions:"
     sudo pcs status | sed -n -e '/Failed Actions:/,/^$/p' | egrep 'OCF_|not running|unknown' | awk '{print $2}' | cut -f1 -d_ | sort |uniq
     FAILURES=true
     return 1
    else
     errors=$(sudo pcs status | sed -n -e '/Failed Actions:/,/^$/p' | grep -A1 $resource)
     if [ $? -eq 0 ]
      then
       echo "Resource $resource has failed actions:"
       echo $errors
       FAILURES=true
       return 1
      else
       echo "No failed actions for $resource."
       return 0
     fi
   fi
  else
   if [ "x$resource" == "x" ]
    then
     echo "Cluster is OK."
    else
     echo "No failed actions for $resource."
   fi
   return 0
  fi
}

function check_resources_process_status {
 if [ "$1" == "pre" ]
  then
   # If the run is for pre we take a snap of the actual resources status
   sudo pcs resource show | egrep '^ (C|[a-Z])' | sed 's/.* \[\(.*\)\]/\1/g' | sed 's/ \(.*\)(.*):.*/\1/g' | sort > $resources_tmp_file
  else
   [ "$1" != "post" ] && echo "Must pass pre or post as parameter." && exit 1
 fi

 resources=$(cat $resources_tmp_file)

 for resource in $resources
  do
   echo -n "$resource -> "

   case $resource in
   ip-*) #ip_addr=$(pcs resource show $resource | grep Attributes | sed 's/.*ip=\(.*\) cidr.*/\1/g')
        ip_addr=$(echo $resource | sed 's/ip-//g')
        sudo ip a s | grep $ip_addr &> /dev/null
        ;;
   rabbitmq) sudo /usr/sbin/rabbitmqctl cluster_status &> /dev/null
             ;;
   redis) pidof /usr/bin/redis-server &> /dev/null
          ;;
   galera) pidof /usr/libexec/mysqld &> /dev/null
           ;;
   *cleanup*|delay) echo  -n "no need to check if it's "
                  ;;
   *) systemctl is-active $resource &> /dev/null
      ;;
   esac
 
   [ $? -eq 0 ] && echo "active" || echo "inactive"
 
  done
}

function check_resource_status {
 resource=$1
 status=$2
 i=1

 while [ $i -lt $timeout ]
  do
   output=$(sudo pcs status | sed -n -e "/Clone Set: .*\[$resource\]/,/^ [a-Z]/p" | head -n -1 | tail -n +2 | egrep -v "$status\:")
   if [ "x$output" == "x" ]
    then
     return 0
     break
    else
     echo -n "."
     sleep 1
     let "i++"
   fi
  done
 return 1
}

function play_on_resources {
 action=$1
 resources=$2

 case "$action" in
 "enable") resource_status="Started"
          ;;
 "disable") resource_status="Stopped"
         ;;
 *) echo "Wrong action specified."
    exit 1
    ;;
 esac

 for resource in $resources
  do
   echo -n "$(date) - Performing action $action on resource $resource "
   sudo pcs resource $action $resource
   check_resource_status $resource $resource_status
   if [ $? -ne 0 ]
    then
     check_failed_actions $resource
    else
     echo "OK"
   fi
  done
}

function recover_environment {
 if [ "x$recover" != "x" ]
  then
   echo "$(date) - Waiting $recover seconds to recover environment"
   sleep $recover
   echo "$(date) - Recovering..."
   case $test_sequence in
    "0") echo -n "$(date) - No need to recover."
         return 0
         ;;
    "A"|"B"|"C")
     echo "$(date) - Cleaning up cluster... "
     echo "$(date) * Step 1: enable all the systemd resources"
     play_on_resources "enable" "$OVERCLOUD_CORE_RESOURCES"

     echo "$(date) * Step 2: Cleaning up failed resources"
     sudo pcs status | sed -n -e '/Failed Actions:/,/^$/p' | egrep 'OCF_TIMEOUT|not running' | awk '{print $2}' | cut -f1 -d_ | sort | uniq | while read RES; do echo "Cleaning $RES"; sudo pcs resource cleanup $RES; done
     ;;
    "D")
     echo -n "Starting cluster "
     sudo pcs cluster start --all
     ;;
   esac
 fi

 i=1
 while true; do
  [ $i -eq $timeout ] && break

  sudo pcs status | grep Stopped &> /dev/null
  if [ $? -eq 0 ]
   then
    echo -n "."
   else
    echo "Cluster started."
    return 0
    break
  fi
  sleep 1
  let "i++"
 done

 echo "Problems during recovery!"
 return 1
}

if [ $# -gt 0 ]
 then
  while :; do
   case $1 in
    -h|-\?|--help)
        usage
        exit
        ;;
    -t|--test)
        test_sequence="$2"
        shift
        ;;
    -r|--recover)
        if [ "$2" -eq "$2" ] 2>/dev/null
         then
          recover=$2
         else
          echo "Error reading recover seconds!"
          usage
          exit 1
        fi
        shift
        ;;
    --)
        shift
        break
        ;;
    -?*)
        usage
        exit 1
        ;;
    *)
        break
   esac

   shift
  done
 else
  usage
  exit 1
fi

# Fixed parameters
resources_tmp_file="/tmp/resources.list"
timeout=60

# Populating overcloud elements
echo "$(date) - Populationg overcloud elements..."
echo -n "$(date) * Getting systemd resource list..."
export OVERCLOUD_CORE_RESOURCES="galera rabbitmq-clone"
export OVERCLOUD_SYSTEMD_RESOURCES=$(sudo pcs config show | egrep "Resource:.*systemd"|grep -v "haproxy"|awk '{print $2}')
[ $? -ne 0 ] && exit 1
echo "OK"

FAILURES=false

case "$test_sequence" in
 "0") 
     echo "$(date) - List of cluster's failed actions:"
     check_failed_actions

     ;;
 "A")
     echo "$(date) * Step 1: disable all the systemd resources"
     play_on_resources "disable" "$OVERCLOUD_SYSTEMD_RESOURCES"
   
     echo "$(date) - List of cluster's failed actions:"
     check_failed_actions
   
     echo "$(date) * Step 2: disable core services"
     play_on_resources "disable" "$OVERCLOUD_CORE_RESOURCES"
   
     echo "$(date) - List of cluster's failed actions:"
     check_failed_actions
   
     echo "$(date) * Step 3: enable each resource one by one and check the status"
     play_on_resources "enable" "$OVERCLOUD_SYSTEMD_RESOURCES"
   
     echo "$(date) - List of cluster's failed actions:"
     check_failed_actions
   
     ;;
"B")
     echo "$(date) * Step 1: disable core services"
     play_on_resources "disable" "$OVERCLOUD_CORE_RESOURCES"
   
     echo "$(date) - List of cluster's failed actions:"
     check_failed_actions
   
     echo "$(date) * Step 2: disable all the systemd resources"
     play_on_resources "disable" "$OVERCLOUD_SYSTEMD_RESOURCES"
   
     echo "$(date) - List of cluster's failed actions:"
     check_failed_actions
   
     echo "$(date) * Step 3: enable all the systemd resources"
     play_on_resources "enable" "$OVERCLOUD_SYSTEMD_RESOURCES"
   
     echo "$(date) - List of cluster's failed actions:"
     check_failed_actions
   
     ;;
"C")
     echo "$(date) * Step 1: disable core services"
     play_on_resources "disable" "$OVERCLOUD_CORE_RESOURCES"
   
     echo "$(date) - List of cluster's failed actions:"
     check_failed_actions
   
     echo "$(date) * Step 2: poll every minute for twenty minutes the status of the resources"
     for i in $(seq 1 20)
      do
       check_failed_actions
       if [ $? -ne 0 ]
        then
         echo "Errors found, test is over."
         break
       fi
       sleep 60
      done
   
     echo "$(date) - List of cluster's failed actions:"
     check_failed_actions

     ;;
"D")
     echo "$(date) * Step 1: checking actual process status"
     check_resources_process_status "pre"
   
     echo "$(date) * Step 2: stopping cluster"
     sudo pcs cluster stop --all
   
     echo "$(date) * Step 3: checking actual process status"
     check_resources_process_status "post"

     ;;
*)
     echo "Unable to recognize test suite!"
     usage
     exit 1

     ;;
esac

if [ "$FAILURES" = true ]
 then
  echo "Test $test_sequence FAILED!"
  exit 1
fi

recover_environment "$test_sequence"

if [ $? -ne 0 ]
 then
  echo "Recovery from test $test_sequence FAILED!"
  exit 1
fi

echo "$(date) - End"
